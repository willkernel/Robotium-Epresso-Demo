import com.sun.org.apache.xalan.internal.xsltc.compiler.If

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.0.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }

    //Resolving a conflict in library versions
    configurations.all {
        resolutionStrategy.force 'com.android.support:support-annotations:26.0.2'
    }


}
/**Collecting Test Results
 If your app includes multiple flavors or modules, the HTML test reports will be
 organized into separate subdirectories. This makes it tedious to examine each one
 individually.
 Fortunately, there is a plug-in available to collect all the reports into a single build
 folder. In the top-level build file, after the buildscript block, include the androidreporting
 plug-in.

 The Android reporting plug-in collects test reports into a single file
 Now if you run the mergeAndroidReports task, everything will be collected into a
 single file.

 Merging Android test reports
 gradlew deviceCheck mergeAndroidReports --continue

 The --continue flag is a standard Gradle flag, telling the build to keep going even if
 there are failed tests. The result when running with multiple variants should be similar
 to that in

 The technique listed here for
 merging test reports works with any tests, not just Espresso.
 */
apply plugin: 'android-reporting'

task clean(type: Delete) {
    delete rootProject.buildDir
}
